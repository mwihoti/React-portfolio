[{"C:\\kanban-app\\src\\index.js":"1","C:\\kanban-app\\src\\reportWebVitals.js":"2","C:\\kanban-app\\src\\App.js":"3","C:\\kanban-app\\src\\components\\Header.js":"4"},{"size":535,"mtime":1687195010445,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1687195012888,"results":"7","hashOfConfig":"6"},{"size":5916,"mtime":1687228732710,"results":"8","hashOfConfig":"6"},{"size":846,"mtime":1687227404031,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wuuj90",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\kanban-app\\src\\index.js",[],[],"C:\\kanban-app\\src\\reportWebVitals.js",[],[],"C:\\kanban-app\\src\\App.js",["23"],[],"import React, { useState, useEffect } from \"react\";\nimport { Header } from \"./components/Header\";\nimport Draggable from 'react-draggable';\n\n\nexport default function App() {\n\n  const [board, setBoard] = useState([])\n  \nuseEffect(()=>{\n  let data = window.localStorage.getItem(\"data\")\n  if(data){\n   setBoard(JSON.parse(data))\n  }else{\n   setBoard([\n    {\n     id: 1,\n     title: 'To Do',\n     cards: [\n      {\n       id: 1,\n       title: 'Learn React',\n       description: 'Learn the fundamentals of React'\n      },\n      {\n       id: 2,\n       title: 'Learn Firebase',\n       description: 'Learn the fundamentals of Firebase'\n      }\n     ]\n    },\n    {\n     id: 2,\n     title: 'In Progress',\n     cards: [\n      {\n       id: 3,\n       title: 'Learn React Native',\n       description: 'Learn the fundamentals of React Native'\n      },\n      {\n       id: 4,\n       title: 'Learn GraphQL',\n       description: 'Learn the fundamentals of GraphQL'\n      }\n     ]\n    },\n    {\n     id: 3,\n     title: 'Completed',\n     cards: [\n      {\n       id: 5,\n       title: 'Learn Node.js',\n       description: 'Learn the fundamentals of Node.js'\n      },\n      {\n       id: 6,\n       title: 'Learn Express',\n       description: 'Learn the fundamentals of Express'\n      }\n     ]\n    }\n   ])\n  }\n },[])\n\n useEffect(()=>{\n  if (board.length > 0) window.localStorage.setItem(\"data\",JSON.stringify(board))\n },[board])\n  \n  return (\n    <div>\n     <Header />\n     <div style={styles.boardContainer}>\n      {board.map((list) => {\n       return (\n        <div id={`list_${list.id}`} key={list.id} className=\"list-container\" style={styles.listContainer}>\n         <h2>{list.title}</h2>\n         <button\n          style={styles.newCard}\n          onClick={() => {\n           let temp_boards = [...board]\n           for (let i = 0; i < temp_boards.length; i++) {\n            if (temp_boards[i].id === list.id) {\n             temp_boards[i].cards.push({\n              id: new Date().getTime(),\n              title: 'New Card',\n              description: 'New Card Description'\n             })\n            }\n           }\n           setBoard(temp_boards)\n          }}\n         >+ New Card</button>\n         {list.cards.map((card) => {\n          return (\n           <Draggable\n            key={card.id}\n            onStop={(e,) => {\n              let allLists = document.querySelectorAll('.list-container');\n           for (let i = 0; i < allLists.length; i++) {\n            let list = allLists[i];\n            let rect = list.getBoundingClientRect();\n            let data = {\n             x: e.clientX,\n             y: e.clientY\n            }\n            let flag = false\n            if (data.x > rect.left && data.x < rect.right && data.y > rect.top && data.y < rect.bottom) {\n             let final_list_id = list.id.split('_')[1];\n             let final_card_id = card.id;\n             let temp_boards = [...board]\n             for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n              for (let cardIndex = 0; cardIndex < temp_boards[boardIndex].cards.length; cardIndex++) {\n               if (temp_boards[boardIndex].cards[cardIndex].id === final_card_id) {\n                temp_boards[boardIndex].cards.splice(cardIndex, 1)\n               }\n              }\n             }\n             for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n              if (temp_boards[boardIndex].id === parseInt(final_list_id)) {\n               temp_boards[boardIndex].cards.push(card)\n              }\n             }\n             flag = true\n             setBoard(temp_boards)\n            }\n           }\n            }}\n           >\n            <div style={styles.cardContainer}>\n             <input type={\"text\"} style={styles.title} value={card.title}\n              onChange={(e) => {\n                let temp_boards = [...board]\n            for (let i = 0; i < temp_boards.length; i++) {\n              for (let j = 0; j < temp_boards[i].cards.length; j++) {\n               if (temp_boards[i].cards[j].id === card.id) {\n                temp_boards[i].cards[j].title = e.target.value\n               }\n              }\n             }\n             setBoard(temp_boards)\n              }}\n             />\n             <input type={\"text\"} style={styles.description} value={card.description}\n              onChange={(e) => {\n                let temp_boards = [...board]\n            for (let i = 0; i < temp_boards.length; i++) {\n              for (let j = 0; j < temp_boards[i].cards.length; j++) {\n               if (temp_boards[i].cards[j].id === card.id) {\n                temp_boards[i].cards[j].description = e.target.value\n               }\n              }\n             }\n             setBoard(temp_boards)\n              }}\n             />\n            </div>\n           </Draggable>\n          )\n         })}\n        </div>\n       )\n      })}\n     </div>\n    </div>\n   );\n  }\n  const styles = {\n    boardContainer: {\n     display: 'flex',\n     flexDirection: 'row',\n     justifyContent: 'space-around',\n     marginTop: '100px'\n    },\n    listContainer: {\n     backgroundColor: '#ecf0f1',\n     borderRadius: '5px',\n     padding: '10px',\n     width: '30vw',\n     minHeight: \"100vh\",\n    },\n    cardContainer: {\n     backgroundColor: '#ffffff',\n     borderRadius: '5px',\n     padding: '10px',\n     margin: '10px 0',\n     minHeight: \"100px\",\n     boxShadow: '0 0 10px 0 rgba(0,0,0,0.2)',\n     display:\"flex\",\n     flexDirection:\"column\",\n   \n    },\n    title: {\n     padding: 0,\n     margin: 0,\n     border:\"none\",\n     fontSize:\"20px\",\n     fontWeight:\"bold\",\n    },\n    description: {\n     padding: 0,\n     margin: 0,\n     border:\"none\",\n     fontSize:\"15px\",\n   fontWeight:\"bold\",\n    },\n    newCard:{\n     backgroundColor: '#2ecc71',\n     color: '#ffffff',\n     border: 'none',\n     width:\"100%\",\n     padding: '10px',\n     borderRadius: '5px',\n     cursor: 'pointer',\n     outline: 'none'\n   \n    },\n   }","C:\\kanban-app\\src\\components\\Header.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":126,"column":14,"nodeType":"26","messageId":"27","endLine":126,"endColumn":18},"no-unused-vars","'flag' is assigned a value but never used.","Identifier","unusedVar"]